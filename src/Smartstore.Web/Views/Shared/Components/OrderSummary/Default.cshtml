@using Smartstore.Web.Models.Cart;

@model ShoppingCartModel

<div class="order-summary-content cart-content" data-empty-text="@T("ShoppingCart.CartIsEmpty")">

    <zone name="order_summary_content_before" />
    
    <partial name="_OrderReviewData" model="Model.OrderReviewData" />

    @if (Model.DisplayCommentBox && !Model.IsEditable)
    {
        <partial name="_CommentBox" model="Model" />
    }

    @if (Model.Items.Any())
    {
        <div sm-if="Model.Warnings.Any()" class="alert alert-danger">
            <ul>                
                @foreach(var warning in Model.Warnings)
                {
                    <li>@warning</li>
                }
            </ul>
        </div>

        @* "File upload" attribute control type requries "multipart/form-data" *@
        <form asp-route="ShoppingCart" id="frm-shopping-cart" method="post" enctype="multipart/form-data" onkeydown="return event.key != 'Enter';">
            <div class="row cart-container">
                <div class="col-xl-8">
                    <div id="cart-items" class="cart" attr-class='(Model.IsEditable, "cart-editable")'>
                        <div class="cart-head">
                            <div class="cart-row">
                                <div class="cart-col cart-col-main">
                                    @T("ShoppingCart.Product(s)")
                                </div>
                                <div class="cart-col cart-col-price">
                                    @T("ShoppingCart.UnitPrice")
                                </div>
                                <div class="cart-col cart-col-qty">
                                    @T("ShoppingCart.Quantity")
                                </div>
                                <div class="cart-col cart-col-price cart-col-subtotal">
                                    @T("ShoppingCart.ItemTotal")
                                </div>
                            </div>
                        </div>
                        <div class="cart-body">
                            <partial name="CartItems" model="Model" />
                        </div>
                    </div>
                </div>
                <div class="col-xl-4">
                    <div class="cart-footer">
                        <div class="row">
                            <div class="col-md-6 col-xl-12">
                                @if (Model.IsEditable)
                                {
                                    <zone name="order_summary_actions_before" />

                                    <partial name="_DiscountBox" model="Model.DiscountBox" />
                                    <partial name="_GiftCardBox" model="Model.GiftCardBox" />
                                    <partial name="_RewardPointsBox" model="Model.RewardPoints" />
                                    <partial name="EstimateShipping" model="Model.EstimateShipping" />

                                    <zone name="order_summary_actions_after" />
                                }
                                else
                                {
                                    <div sm-if="Model.CheckoutAttributeInfo.HasValue()" class="selected-checkout-attributes">
                                        @Html.Raw(Model.CheckoutAttributeInfo)
                                    </div>
                                }

                                <hr class="my-2" />
                            </div>
                            <div class="col-md-6 col-xl-12">
                                @if (Model.IsEditable)
                                {
                                    <partial name="_CheckoutAttributes" model="Model.CheckoutAttributes" view-data="new ViewDataDictionary(ViewData)" />
                                }

                                <zone name="order_summary_totals_before" />

                                <div id="order-totals">
                                    @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                                </div>

                                <zone name="order_summary_totals_after" />
                            </div>
                            <div sm-if="Model.IsEditable" class="col-12 mt-3">
                                <zone name="order_summary_buttons_before" />

                                <div class="cart-buttons">

                                    <div id="start-checkout-buttons" class="d-flex flex-column row-gap-2">
                                        <div class="checkout-buttons">
                                            <input type="submit" name="startcheckout" value="startcheckout" id="startcheckout" class="d-none" />
                                            <button type="button" id="checkout" name="checkout" class="btn btn-primary btn-lg btn-block btn-checkout">
                                                <span>@T("Checkout.Button")</span>
                                                <i class="fa fa-angle-right"></i>
                                            </button>
                                        </div>

                                        @{
                                            var paymentButtons = (await Model.ButtonPaymentMethods.Items
                                                .SelectAwait(x => x.InvokeAsync(ViewContext))
                                                .AsyncToList())
                                                .Where(x => x.HasContent());
                                        }

                                        <div sm-if="paymentButtons.Any()" class="addon-buttons">
                                            <div class="d-flex flex-column row-gap-2">
                                                <div class="text-center">
                                                    <span>@T("ShoppingCart.AlternativePaymentButtons")</span>
                                                </div>

                                                @*Payment method buttons (e.g. Paypal, Amazon Pay)*@
                                                @foreach (var button in paymentButtons)
                                                {
                                                    @button
                                                }
                                            </div>
                                        </div>
                                    </div>

                                </div>

                                <zone name="order_summary_buttons_after" />
                            </div>
                        </div>
                    </div>
                </div>
                <div sm-if="Model.IsEditable" class="col-12 col-md-6 col-lg-5 col-xl-4 col-xxl-3 my-3">
                    <button class="btn btn-secondary btn-lg btn-block btn-continue-shopping" type="submit" name="continueshopping" value="continueshopping">
                        <i class="fa fa-angle-left mr-3"></i>
                        <span>@T("ShoppingCart.ContinueShopping")</span>
                    </button>
                </div>
            </div>

        </form>

        <zone name="order_summary_content_after" />

        if (Model.IsEditable)
        {
            @await Component.InvokeAsync("CrossSellProducts")
        }
    }
    else
    {
        <div class="alert alert-warning fade show">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
</div>

@if (!Model.IsEditable && Model.Items.Any(x => x.IsDownload && x.HasUserAgreement))
{
    <modal id="user-agreement-modal" sm-render-at-page-end="true" sm-center-vertically="true" sm-size="FlexSmall">
        <modal-body></modal-body>
        <modal-footer>
            <button class="btn btn-secondary" data-dismiss="modal">@T("Common.Confirm")</button>
        </modal-footer>
    </modal>

    <script sm-target-zone="scripts" data-origin="order-summary">
        $(function () {
            $('a.download-user-agreement').on("click", function () {
                var url = '@(Url.Action("GetUserAgreement", "Download"))?productId=' + $(this).attr('data-id'),
                    dialog = $('#user-agreement-modal');

                dialog.find('.modal-body').empty();

                $.get(url, function (html) {
                    dialog.find('.modal-body').html(html);
                });

                dialog.modal();

                return false;
            });
        });
    </script>
}

@if (Model.IsEditable)
{
    <script src="~/js/public.refreshcart.js" sm-target-zone="scripts"></script>

    <script sm-target-zone="scripts">
        $("#checkout").on("click", function () {
            var form = $("#frm-shopping-cart");

            if (!form[0].reportValidity()) {
                return false;
            }

            $('#startcheckout').trigger('click'); 
            return false;
        });
    </script>
}