/// <reference path="_variables.scss" />
/// <reference path="_functions.scss" />
/// <reference path="_mixins.scss" />

// stylelint-disable selector-no-qualifying-type

//
// Base styles
//

.btn {
  --btn-padding-x: #{$btn-padding-x};
  --btn-padding-y: #{$btn-padding-y};
  --btn-font-family: #{$btn-font-family};
  --btn-font-weight: #{$btn-font-weight};
  --btn-line-height: #{$btn-line-height};
  --btn-color: #{$body-color};
  --btn-bg: transparent;
  --btn-border-width: #{$btn-border-width};
  --btn-border-color: transparent;
  --btn-border-radius: #{$btn-border-radius};
  --btn-disabled-opacity: #{$btn-disabled-opacity};
  --btn-box-shadow: #{$btn-box-shadow};
  //--btn-focus-box-shadow: #{$btn-focus-box-shadow};
  --btn-active-box-shadow: #{$btn-active-box-shadow};
  --btn-focus-box-shadow: inset 0 0 0 #{$btn-focus-width} #fff;

  display: inline-block;
  padding: var(--btn-padding-y) var(--btn-padding-x);
  font-family: var(--btn-font-family);
  @include font-size(var(--btn-font-size));
  font-weight: var(--btn-font-weight);
  line-height: var(--btn-line-height);
  color: var(--btn-color);
  text-align: center;
  text-decoration: if($link-decoration == none, null, none);
  white-space: $btn-white-space;
  vertical-align: middle;
  cursor: if($enable-pointer-cursor-for-buttons, pointer, null);
  user-select: none;
  background-color: var(--btn-bg);
  border: var(--btn-border-width) solid var(--btn-border-color);
  @include border-radius(var(--btn-border-radius));
  @include gradient-bg(var(--btn-bg));
  @include box-shadow(var(--btn-box-shadow));
  @include transition($btn-transition);

  &:hover {
    color: var(--btn-hover-color);
    text-decoration: if($link-hover-decoration == underline, none, null);
    background-color: var(--btn-hover-bg);
    border-color: var(--btn-hover-border-color);
  }

  &:focus-visible {
    $ow: $btn-focus-width - 1px;
    outline: #{$ow} solid $input-focus-border-color;
    outline-offset: calc(#{$ow} * -1);
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: var(--btn-box-shadow), var(--btn-focus-box-shadow);
    } @else {
      box-shadow: var(--btn-focus-box-shadow);
    }
  }

  &.disabled,
  &:disabled,
  fieldset:disabled & {
    color: var(--btn-disabled-color);
    pointer-events: none;
    background-color: var(--btn-disabled-bg);
    background-image: if($enable-gradients, none, null);
    border-color: var(--btn-disabled-border-color);
    opacity: var(--btn-disabled-opacity);
    @include box-shadow(none);
  }

  &:active,
  &.active,
  .show > &.dropdown-toggle {
    color: var(--btn-active-color);
    background-color: var(--btn-active-bg);
    // Remove CSS gradients if they're enabled
    background-image: if($enable-gradients, none, null);
    border-color: var(--btn-active-border-color);
    @include box-shadow(var(--btn-active-shadow));

    &:focus-visible {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows {
        box-shadow: var(--btn-active-shadow), var(--btn-focus-box-shadow);
      } @else {
        box-shadow: var(--btn-focus-box-shadow);
      }
    }
  }

  &.disabled,
  &:disabled,
  fieldset:disabled & {
    color: var(--btn-disabled-color) !important;
    pointer-events: none !important;
    background-color: var(--btn-disabled-bg) !important;
    background-image: if($enable-gradients, none, null);
    border-color: var(--btn-disabled-border-color) !important;
    opacity: var(--btn-disabled-opacity);
    @include box-shadow(none);
  }
}


//
// Alternate buttons
//

@each $color, $value in $theme-colors {
  .btn-#{$color} {
    @if $color == "light" or $color == "secondary" {
      @include button-variant(
        $value,
        rgba($gray-700, 0.15),
        $hover-background: darken($value, 3%),
        $hover-border: rgba($gray-700, 0.15),
        $active-background: darken($value, 6%),
        $active-border: rgba($gray-700, 0.2));
    }
    @else {
      @include button-variant(
        $value,
        rgba($gray-700, 0.15),
        $hover-background: darken($value, 7.5%),
        $hover-border: rgba($gray-700, 0.15),
        $active-background: darken($value, 10%),
        $active-border: rgba($gray-700, 0.2));
    }
  }
}

@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    @include button-outline-variant($value);
  }
}


//
// Link buttons
//

// Make a button look and behave like a link
.btn-link {
  font-weight: $font-weight-normal;
  color: $link-color;
  text-decoration: $link-decoration;

  @include hover() {
    color: $link-hover-color;
    text-decoration: $link-hover-decoration;
  }

  &:focus,
  &.focus {
    text-decoration: $link-hover-decoration;
  }

  &:disabled,
  &.disabled {
    color: $btn-link-disabled-color;
    pointer-events: none;
  }

  // No need for an active state here
}


//
// Button Sizes
//

.btn-lg {
  @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $btn-font-size-lg, $btn-line-height-lg, $btn-border-radius-lg);
}

.btn-sm {
  @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $btn-font-size-sm, $btn-line-height-sm, $btn-border-radius-sm);
}


//
// Block button
//

.btn-block {
  display: block;
  width: 100%;

  // Vertically space out multiple block buttons
  + .btn-block {
    margin-top: $btn-block-spacing-y;
  }
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
  &.btn-block {
    width: 100%;
  }
}
